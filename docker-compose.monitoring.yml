services:
  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - prometheus_config:/etc/prometheus  # Using named volume instead of bind mount
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: unless-stopped
    networks:
      - monitoring_network
      - backend_network  # To access Django app
    user: "nobody:nobody"  # Use non-root user for rootless compatibility

  alertmanager:
    image: prom/alertmanager:v0.25.0
    volumes:
      - alertmanager_config:/etc/alertmanager  # Using named volume instead of bind mount
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    restart: unless-stopped
    networks:
      - monitoring_network
    user: "nobody:nobody"  # Use non-root user for rootless compatibility

  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning  # Using named volume instead of bind mount
      - grafana_dashboards:/var/lib/grafana/dashboards  # Using named volume instead of bind mount
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Change this in production
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false  # Configure email for alerts in production
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    restart: unless-stopped
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    user: "472"  # Grafana's default non-root user ID

  node-exporter:
    image: prom/node-exporter:v1.6.1
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    restart: unless-stopped
    networks:
      - monitoring_network
    user: "nobody:nobody"  # Use non-root user for rootless compatibility

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    restart: unless-stopped
    networks:
      - monitoring_network

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.1
    environment:
      - DATA_SOURCE_NAME=postgresql://ponguser:WillowRapids@db:5432/pongdb?sslmode=disable
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    restart: unless-stopped
    networks:
      - monitoring_network
      - backend_network  # To access PostgreSQL
    user: "nobody:nobody"  # Use non-root user for rootless compatibility

  # Setup service for monitoring configuration
  monitoring-setup:
    image: alpine:latest
    volumes:
      - ./monitoring:/tmp/monitoring
      - prometheus_config:/prometheus_config
      - alertmanager_config:/alertmanager_config
      - grafana_provisioning:/grafana_provisioning
      - grafana_dashboards:/grafana_dashboards
    command: >
      sh -c "
        echo 'Copying Prometheus configuration...' &&
        mkdir -p /prometheus_config &&
        cp -r /tmp/monitoring/prometheus/* /prometheus_config/ &&
        echo 'Copying Alertmanager configuration...' &&
        mkdir -p /alertmanager_config &&
        cp -r /tmp/monitoring/alertmanager/* /alertmanager_config/ &&
        echo 'Copying Grafana provisioning...' &&
        mkdir -p /grafana_provisioning &&
        cp -r /tmp/monitoring/grafana/provisioning/* /grafana_provisioning/ &&
        echo 'Copying Grafana dashboards...' &&
        mkdir -p /grafana_dashboards &&
        cp -r /tmp/monitoring/grafana/dashboards/* /grafana_dashboards/ &&
        echo 'Monitoring setup complete.'
      "
    profiles:
      - setup

networks:
  monitoring_network:
    driver: bridge
  backend_network:
    driver: bridge

volumes:
  prometheus_data:
  prometheus_config:
  alertmanager_data:
  alertmanager_config:
  grafana_data:
  grafana_provisioning:
  grafana_dashboards:
#!/usr/bin/env python
"""
Pong Leaderboard Population Script

This script populates the database with fake player data for demo purposes.
Run it from the backend directory with Django's shell:

python manage.py shell < populate_db.py

This script can also be run directly:
python populate_db.py

It will be automatically executed by Docker during container startup.
"""
import os
import sys
import random
import django
from datetime import datetime, timedelta

# Set up Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
try:
    django.setup()
except Exception as e:
    print(f"Failed to setup Django environment: {e}")
    sys.exit(1)

# Import models after Django setup
from api.models import Player

# Configuration
NUM_PLAYERS = 50  # Number of fake players to create
MIN_GAMES = 5     # Minimum games per player
MAX_GAMES = 60    # Maximum games per player
WIN_RATES = {
    'novice': (0.1, 0.3),     # 10-30% win rate
    'average': (0.35, 0.55),  # 35-55% win rate
    'good': (0.6, 0.75),      # 60-75% win rate
    'pro': (0.75, 0.95)       # 75-95% win rate
}

ADJECTIVES = [
    'Swift', 'Mighty', 'Shadow', 'Nimble', 'Cyber', 'Iron', 'Pixel', 'Quantum', 
    'Cosmic', 'Digital', 'Electric', 'Neon', 'Stealth', 'Rocket', 'Laser',
    'Thunder', 'Glitch', 'Virtual', 'Turbo', 'Hyper'
]

NOUNS = [
    'Bastet', 'Ninja', 'Dragon', 'Phoenix', 'Knight', 'Wizard', 'Tiger', 'Eagle',
    'Wolf', 'Hawk', 'Gamer', 'Warrior', 'Falcon', 'Hunter', 'Player', 'Cobra',
    'Champion', 'Viper', 'Master', 'Legend'
]

def generate_player_name():
    """Generate a random player name"""
    adj = random.choice(ADJECTIVES)
    noun = random.choice(NOUNS)
    number = random.randint(1, 99)
    
    # 50% chance to add a number suffix
    if random.random() > 0.5:
        return f"{adj}{noun}{number}"
    return f"{adj}{noun}"

def create_fake_players():
    """Create fake players with random stats"""
    print(f"Creating {NUM_PLAYERS} fake players...")
    
    # First delete existing players that look like they were generated by this script
    pattern_players = Player.objects.filter(
        name__regex=r'^(Swift|Mighty|Shadow|Nimble|Cyber|Iron|Pixel|Quantum|Cosmic|Digital|Electric|Neon|Stealth|Rocket|Laser|Thunder|Glitch|Virtual|Turbo|Hyper)(Panda|Ninja|Dragon|Phoenix|Knight|Wizard|Tiger|Eagle|Wolf|Hawk|Gamer|Warrior|Falcon|Hunter|Player|Cobra|Champion|Viper|Master|Legend)(\d{1,2})?$'
    )
    deleted_count = pattern_players.count()
    pattern_players.delete()
    print(f"Deleted {deleted_count} existing generated players")
    
    # Create new fake players
    players_created = 0
    for _ in range(NUM_PLAYERS):
        # Keep trying names until we find an unused one
        while True:
            name = generate_player_name()
            if not Player.objects.filter(name=name).exists():
                break
        
        # Determine player skill level
        skill_level = random.choices(
            ['novice', 'average', 'good', 'pro'],
            weights=[0.4, 0.3, 0.2, 0.1],
            k=1
        )[0]
        
        # Calculate games and wins based on skill level
        games_played = random.randint(MIN_GAMES, MAX_GAMES)
        win_rate_range = WIN_RATES[skill_level]
        win_rate = random.uniform(win_rate_range[0], win_rate_range[1])
        wins = int(games_played * win_rate)
        
        # Create the player
        player = Player(
            name=name,
            wins=wins,
            games_played=games_played
        )
        player.save()
        players_created += 1
        
    print(f"Successfully created {players_created} fake players")

def print_leaderboard_preview():
    """Print a preview of the top 10 players in the leaderboard"""
    print("\nLeaderboard Preview (Top 10):")
    print("-" * 60)
    print(f"{'Rank':<6} {'Name':<20} {'W/L':<10} {'Games':<8} {'Win %':<8} {'Rank'}")
    print("-" * 60)
    
    top_players = Player.objects.all().order_by('-wins')[:10]
    for i, player in enumerate(top_players, 1):
        win_ratio = (player.wins / player.games_played * 100) if player.games_played > 0 else 0
        rank_class = player.rank_class
        print(f"{i:<6} {player.name:<20} {player.wins}/{player.games_played-player.wins:<4} {player.games_played:<8} {win_ratio:.1f}%    {rank_class}")
    
    print("-" * 60)

if __name__ == "__main__":
    # Check for environment variable that can disable population
    if os.environ.get('SKIP_DB_POPULATION') != 'true':
        create_fake_players()
        print_leaderboard_preview()
        print("\nDone! The leaderboard is now populated with fake players.")
    else:
        print("Database population skipped due to SKIP_DB_POPULATION environment variable.")